#!/bin/sh
echo
echo " ____    _____      _      ____    _____ "
echo "/ ___|  |_   _|    / \    |  _ \  |_   _|"
echo "\___ \    | |     / _ \   | |_) |   | |  "
echo " ___) |   | |    / ___ \  |  _ <    | |  "
echo "|____/    |_|   /_/   \_\ |_| \_\   |_|  "
echo
echo "Creating artifacts for blockchain network"
echo

export FABRIC_CFG_PATH=$PWD

# ------------------------------------------------------------------------------------------------------------------------
# Start Services
# ------------------------------------------------------------------------------------------------------------------------
#cd $FABRIC_CFG_PATH
#docker network create --driver bridge fab-net

#cd $FABRIC_CFG_PATH

docker-compose -f docker-compose-cli.yaml up -d orderer1.fabric.com
#docker-compose -f docker-compose-cli.yaml up peer0.po1.fabric.com
#docker-compose -f docker-compose-cli.yaml up -d peer1.po1.fabric.com
docker-compose -f docker-compose-cli.yaml up -d cli
#docker exec -it cli bash

#docker-compose -f docker-compose-cli.yaml down

# ------------------------------------------------------------------------------------------------------------------------
# Create Channel
# The ``channel.tx`` is an artifact that was generated by running the # ``configtxgen`` command on the orderer.
# This artifact needs to be transferred # to Peer1's host machine out-of-band from the orderer.
# The command peer channel create -c fabchannel01 will generate fabchannel01.block on Peer1
# At the specified output path ``/tmp/hyperledger/org1/peer1/assets/mychannel.block``,
# which will be used by all peers in the network that wish # to join the channel.
# This ``fabchannel01.block`` will be need to transferred to all peers # in both Org1 and Org2 out-of-band.
# ------------------------------------------------------------------------------------------------------------------------



#docker exec -it cli bash

#set -x
#export CHANNEL_NAME=fabchannel01
#export ORDERER_TLS_CA=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/fabric.com/users/Admin@fabric.com/tls/tlscacerts



# Added 30s Time



#peer channel create -c $CHANNEL_NAME -f /opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts/channel.tx -o orderer1.fabric.com:7050 --outputBlock /opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts/fabchannel01.block --tls  --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/fabric.com/users/Admin@fabric.com/tls/tlscacerts/tls-0-0-0-0-7150.pem 60s


# configtxgen -inspectBlock /opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts/fabchannel01.block  >/opt/gopath/src/github.com/hyperledger/fabric/logs/fabchannel01.txt
# ------------------------------------------------------------------------------------------------------------------------
# Peer1 in join the channel.
# ------------------------------------------------------------------------------------------------------------------------




#peer channel join -b /opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts/fabchannel01.block 30s
#
#peer channel list
#peer channel fetch newest -c $CHANNEL_NAME
#peer channel getinfo -c $CHANNEL_NAME





# ------------------------------------------------------------------------------------------------------------------------
# Peer1 channel update
#peer channel update -c $CHANNEL_NAME -f /opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts/po1MSPanchors.tx -o orderer1.fabric.com:7050 --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/fabric.com/users/Admin@fabric.com/tls/tlscacerts/tls-0-0-0-0-7150.pem 60s
# ------------------------------------------------------------------------------------------------------------------------
# Chain Code
# ------------------------------------------------------------------------------------------------------------------------
# Chain Code
#peer chaincode install -n mycc -v 1.0 -p github.com/chaincode/abac/go
#peer chaincode install -n marbles -v 1 -p github.com/chaincode/marbles02/go
# Installed remotely response:<status:200 payload:"OK"
#peer chaincode list --installed

# Verify Docker Images and Containers
#docker container ls --all --format "{{.ID}} : {{.Names}}   : {{.Status}} "
#docker images --format "{{.ID}} : {{.Tag}}   : {{.Repository}} "

# chaincode install
#export CHANNEL_NAME=fabchannel01
#peer chaincode instantiate -C $CHANNEL_NAME -n mycc -v 1.0 -c '{"Args":["init","a", "100", "b","200"]}' -o orderer1.fabric.com:7050 --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/fabric.com/users/Admin@fabric.com/tls/tlscacerts/tls-0-0-0-0-7150.pem 60s
#peer chaincode list --instantiated -C $CHANNEL_NAME

# chaincode query
#peer chaincode query -C $CHANNEL_NAME -n mycc -c '{"Args":["query","b"]}'
#peer chaincode query -C $CHANNEL_NAME -n mycc -c '{"Args":["query","a"]}'
#
# chaincode invoke
#peer chaincode invoke -C $CHANNEL_NAME -n mycc -c '{"Args":["invoke","a","b","10"]}' --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/fabric.com/users/Admin@fabric.com/tls/tlscacerts/tls-0-0-0-0-7150.pem 60s


# Fabric Indentity fix
#fabric-ca-client identity modify admin-org1  --attrs "hf.Registrar.Roles=client,hf.Registrar.Attributes=*,hf.Revoker=true,hf.GenCRL=true,admin=true:ecert,abac.init=true:ecert"
#fabric-ca-client reenroll -d -u https://admin-org1:org1AdminPW@0.0.0.0:7054

#fabric-ca-client revoke -e admin-org1 -s 2456c3b9cb9236e61b573f2465345ade67951876
#fabric-ca-client revoke -e peer1 --gencrl

#docker exec -it cli exit

#set +x

#echo
#echo " _____   _   _   ____   "
#echo "| ____| | \ | | |  _ \  "
#echo "|  _|   |  \| | | | | | "
#echo "| |___  | |\  | | |_| | "
#echo "|_____| |_| \_| |____/  "
#echo
#
#echo " Completed Defining the network"
#exit 0
